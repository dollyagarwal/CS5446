#line 2 "pddl+.lex.yy.h"

#line 4 "pddl+.lex.yy.h"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 119
#define YY_END_OF_BUFFER 120
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[775] =
    {   0,
      117,  117,  120,  119,  114,  116,  119,    1,    2,  102,
      100,  101,  110,  103,  117,  109,  119,  106,   69,  104,
      108,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,    3,    4,  113,  114,   77,
      117,  118,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      115,  107,  105,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,   57,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  118,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      113,  113,   56,  113,    0,    0,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,   61,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,    0,    8,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      113,  113,  113,    0,  112,    0,    0,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,   99,  113,  113,  113,  113,  113,  113,  113,  113,
       62,  113,   80,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       68,   67,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       19,    0,    0,    0,   97,  113,  113,  112,    0,    0,
      113,  113,  113,  113,  113,  113,  113,  113,  113,   60,
      113,  113,  113,  113,  113,    0,  113,  113,  113,  113,

      113,  113,  113,    0,   26,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   39,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   27,    0,    0,   88,   86,  112,   48,    0,
      113,  113,   35,   36,  113,   63,   58,   59,  113,  113,
      113,  113,  113,  113,   81,    0,  113,  113,  113,  113,
      113,  113,   90,   37,    0,    0,    0,    0,    0,    0,
        0,    0,   65,    0,   50,    0,    0,    0,    0,    0,
        0,    0,    0,   70,   73,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,   71,    0,    7,
        0,    0,    9,    0,  113,    0,  113,  113,  113,  113,
      113,  113,  113,  113,  113,    0,  113,   64,  113,  113,
      113,  113,  113,    0,   25,    0,    0,    0,    0,   55,
       41,    0,    0,    0,    0,    0,    0,    0,   15,    0,
        0,    0,  111,    0,    0,    0,   66,    0,    0,    0,
        0,    0,   38,    0,    0,    0,    0,    0,    0,  113,
       47,  113,   83,   78,  113,  113,   82,  113,   75,   74,
       49,  113,  113,   84,   89,  113,  113,    0,    0,    0,
        0,    0,    0,    0,   54,    0,    0,    6,    0,    0,

        0,    0,    0,    0,    0,    0,   72,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,    0,   44,   22,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   24,
        0,   53,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  113,  113,   96,  113,  113,
       87,   85,  113,  113,  113,   79,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   42,    0,   23,    0,    0,    0,    0,    0,    0,
        0,  113,  113,   95,   76,  113,  113,  113,    0,    0,

       21,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   20,    0,    0,    0,    0,    0,
        0,  113,   91,  113,  113,  113,   18,    0,    0,    0,
        0,    0,    0,    0,    0,   52,    0,    0,    0,    0,
       43,    0,    5,    0,    0,    0,    0,   94,  113,  113,
       98,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   34,    0,    0,   92,  113,
        0,    0,    0,    0,    0,    0,    0,    0,   51,    0,
        0,   17,    0,    0,    0,    0,   93,    0,    0,    0,
        0,    0,   40,    0,    0,    0,   16,    0,    0,    0,

        0,    0,    0,    0,    0,    0,   28,   46,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   30,   32,    0,    0,
        0,    0,    0,   45,    0,    0,   14,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   29,    0,    0,    0,    0,    0,    0,    0,
       31,    0,   33,    0,    0,    0,    0,   12,    0,    0,
       13,   10,   11,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    1,    5,    1,    1,    1,    1,    6,
        7,    8,    9,    1,   10,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,   15,   16,
       17,   18,   19,    1,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
       46,    1,   47,    1,   30,    1,   48,   49,   50,   51,

       52,   53,   54,   55,   56,   57,   30,   58,   59,   60,
       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[73] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    1,    1,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2
    } ;

static yyconst flex_int16_t yy_base[778] =
    {   0,
        0,   34,  586, 1874,   72, 1874,   36, 1874, 1874, 1874,
     1874,  564, 1874, 1874,   66,   83,  570,  544, 1874,  536,
     1874,  141,   68,  143,   70,   91,  147,  152,  203,  148,
      192,  160,  208,  209,  222, 1874, 1874,  227,   80, 1874,
       74,  517,  141,  205,  240,  246,  262,   63,   95,   75,
      220,  174,   89,  139,  153,  176,  271,  229,  192,  519,
     1874, 1874, 1874,    0,   76,  295,  252,  302,  309,  322,
      317,  318,  323,  330,  335,  331,  341,  336,  342,   78,
      346,  352,  365,  363,  369,   80,  370,  380,  390,  395,
      371,  405,  407,  413,  424,  508,  237,  255,  338,  376,

      376,  381,  389,  393,  382,  388,  402,  401,  417,  410,
      407,  416,  430,  434,  422,  419,  437,  435,  432,  436,
      430,  453,  448,  436,  443,  461,  449,  454,  457,  467,
      491,  490,   82,  507,  514,  524,  474,  519,  526,  531,
      532,  537,  536,  545,  547,  556,  558,  499,  562,  568,
      575,  119,  581,  594,  587,  595,  607,  615,  600,  613,
      596,  624,  633,  503, 1874,  546,  609,  593,  607,  621,
      622,  621,  502,  630,  620,  616,  635,  635,  641,  635,
      629,  651,  646,  639,  637,  662,  660,  662,  668,  667,
      672,  663,  657,  670,  664,  674,  670,  682,  683,  668,

      727,  728,  732,  495,   83,  686,  682,  691,  737,  741,
      747,  743,  752,  753,  757,  165,  758,  770,  687,  768,
      774,  176,  783,  801,  800,  785,  807,  808,  813,  815,
      453,  826,  824,  751,  792,  699,  799,  804,  799,  802,
      703,  806,  727,  813,  818,  811,  812,  822,  823,  819,
     1874,  741,  824,  823,  835,  835,  831,  842,  842,  855,
      847,  856,  866,  870,  857,  870,  879,  862,  867,  872,
      881,  869,  876,  881,  906,  907,  911,  484,  887,  891,
      877,  927,  933,  940,  938,  939,  945,  946,  940,  951,
      969,  901,  968,  974,  955,  921,  985,  996,  957,  980,

     1001, 1002, 1008,  941,  973,  941,  979,  953,  971,  999,
      993,  995, 1001,  992,  996, 1006, 1874, 1011,  441,  998,
     1010, 1019, 1014, 1019, 1025, 1026, 1024, 1026, 1005, 1025,
     1035, 1028, 1043, 1032, 1035, 1048, 1042, 1050,  378, 1046,
     1041,  356, 1874, 1051, 1049, 1079, 1081,  344, 1874, 1053,
     1056, 1088, 1089, 1097, 1105, 1106, 1110, 1111, 1072, 1063,
     1118, 1078, 1119, 1124, 1125, 1083, 1130, 1135, 1104, 1136,
     1137, 1094, 1148,  307, 1113, 1114, 1119, 1137, 1119, 1131,
     1142, 1150, 1874, 1140, 1874, 1151, 1124, 1144, 1160, 1142,
     1153, 1157, 1172, 1874, 1874, 1159, 1157, 1177, 1192, 1181,

     1170, 1183, 1190, 1187, 1175, 1191, 1193, 1874, 1184, 1874,
      294, 1193, 1874, 1185, 1184, 1189,  288, 1219, 1241, 1192,
     1198, 1246, 1217, 1251, 1253, 1210, 1259, 1163, 1218, 1225,
     1270, 1225, 1239, 1256, 1874, 1239, 1242, 1254, 1250, 1874,
      287, 1246, 1253, 1264, 1267, 1247, 1254, 1271, 1874, 1266,
      281, 1269, 1874, 1273,  274, 1279, 1874, 1276, 1285, 1286,
     1282, 1290, 1874, 1287, 1295, 1291, 1307, 1300, 1311, 1307,
     1874, 1304, 1326, 1331, 1316, 1317, 1336, 1308, 1343, 1351,
     1874, 1356, 1310,    0, 1357, 1333, 1330, 1337, 1339, 1337,
     1343, 1337, 1345, 1353,  257,  243, 1349, 1874, 1356, 1361,

     1350, 1366, 1353,  237, 1368, 1364, 1874, 1359, 1358, 1376,
     1379, 1381, 1384, 1387, 1389, 1388, 1389, 1386, 1393, 1390,
     1397, 1393, 1422, 1398, 1417, 1402, 1416, 1404, 1423, 1874,
     1409, 1411, 1413, 1410, 1427, 1436, 1426, 1440, 1438, 1874,
     1438, 1874, 1432, 1439, 1432, 1435, 1436, 1441, 1456, 1458,
     1452, 1460, 1455, 1450,  236, 1466, 1473,    0, 1470, 1475,
     1381,    0, 1476, 1478, 1483,    0, 1466, 1476, 1473,  235,
     1489, 1491, 1484, 1496, 1496, 1491, 1498, 1500, 1490, 1488,
     1509, 1874, 1501, 1874, 1498,  228, 1498, 1505, 1520, 1514,
     1510, 1522, 1527,    0,    0, 1517, 1527, 1524, 1520,  224,

     1874, 1535, 1537,  217, 1541, 1528, 1541,  161, 1532, 1549,
     1550, 1551, 1544, 1548, 1874, 1547, 1548, 1556, 1557, 1571,
     1558, 1563,    0, 1568, 1565, 1577, 1874, 1581, 1581, 1579,
     1575, 1575, 1584, 1575, 1580, 1874, 1596, 1599, 1591, 1586,
     1874, 1590, 1874, 1606, 1607, 1601, 1612,    0, 1602, 1606,
        0, 1619, 1620, 1625, 1613, 1613, 1621, 1620, 1619, 1621,
     1627, 1623, 1625, 1641, 1639, 1874,  159, 1646,    0, 1645,
     1646, 1650, 1658, 1655, 1661, 1651, 1651, 1662, 1874, 1658,
     1654, 1874, 1672, 1659, 1669, 1667,    0, 1679, 1682, 1669,
     1683, 1679, 1675, 1682, 1694, 1694, 1874, 1686, 1693, 1695,

     1693, 1702, 1690, 1706, 1700, 1708, 1874, 1874, 1704, 1711,
     1708, 1709, 1707, 1725, 1711, 1716, 1717, 1724, 1720, 1727,
     1723, 1740, 1733, 1745, 1743, 1736, 1874, 1874, 1749, 1747,
     1755, 1751, 1752, 1874, 1746, 1746, 1874, 1760, 1766, 1764,
     1760, 1756, 1776, 1770, 1763, 1766, 1766, 1776, 1783, 1782,
     1780, 1787, 1874, 1789, 1781, 1789, 1787, 1794, 1794, 1796,
     1874, 1800, 1874, 1796, 1802, 1804, 1800, 1874, 1804, 1806,
     1874, 1874, 1874, 1874, 1871,  128,  110
    } ;

static yyconst flex_int16_t yy_def[778] =
    {   0,
      774,    1,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  775,  774,  774,  774,
      774,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  774,  774,  776,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  775,
      774,  774,  774,  777,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  774,  774,  774,  774,  774,

      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      776,  776,  776,  776,  774,  774,  777,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  777,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,

      776,  776,  776,  774,  774,  774,  774,  777,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  777,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  776,  776,  776,  774,  774,  774,
      777,  776,  776,  776,  776,  776,  776,  776,  777,  776,
      776,  777,  776,  776,  776,  774,  776,  776,  776,  776,

      776,  776,  776,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  776,  776,  774,  774,  774,
      777,  776,  776,  776,  776,  776,  776,  776,  777,  777,
      776,  777,  776,  776,  776,  774,  776,  776,  777,  776,
      776,  777,  776,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,

      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  777,  774,  777,  776,  776,  777,
      777,  776,  777,  776,  776,  774,  776,  776,  777,  777,
      776,  777,  777,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  777,
      774,  777,  776,  776,  777,  777,  776,  777,  776,  776,
      774,  776,  777,  777,  776,  777,  777,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,

      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  777,  777,  777,
      777,  777,  776,  777,  777,  777,  777,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  777,  777,  777,  777,  777,
      776,  777,  777,  777,  777,  777,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  777,  777,  777,  777,  777,  777,  777,  774,  774,

      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  777,  777,  777,  777,  777,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  777,  777,  777,
      777,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  777,  777,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  777,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,

      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,    0,  774,  774,  774
    } ;

static yyconst flex_int16_t yy_nxt[1947] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       23,   23,   24,   25,   26,   23,   27,   28,   23,   23,
       23,   29,   30,   31,   32,   23,   23,   33,   34,   23,
       23,   35,   23,   23,   23,   36,   37,   22,   23,   23,
       24,   25,   26,   23,   27,   28,   23,   23,   29,   30,
       31,   32,   23,   23,   33,   34,   23,   23,   35,   23,
       23,   23,   38,   39,   40,   39,   42,   64,   41,   64,
       64,   39,   64,   39,   42,   64,   41,  148,   64,   64,
       64,   64,   64,  278,   64,  205,  113,   74,  115,   38,

       64,   40,   43,   64,   44,   45,   46,   47,   48,  120,
       49,   64,   75,   50,   51,   52,   53,   54,   55,   56,
       57,   58,   59,  113,   76,   74,  115,  114,   64,   65,
       43,   64,   44,   45,   46,   47,   48,  120,   49,   75,
       50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
       64,   76,   64,   64,  114,   64,   64,   64,  121,   64,
       64,   64,   97,   98,   64,   66,   71,   83,  685,   64,
      635,   67,   64,   68,  289,  122,   72,   64,   69,   70,
       77,   84,   73,   78,   79,   64,  121,   85,   64,   80,
       97,   98,  123,   66,   71,   83,   88,  118,   67,  124,

       68,   64,  122,   72,   64,   69,   70,   77,   84,   73,
       78,   79,   64,  119,   85,   64,   80,   64,   64,  123,
       64,   64,   81,   88,  130,  118,  631,  124,   86,   89,
       82,   64,   87,  628,   64,   99,   64,  616,  100,   64,
      119,   90,   92,  116,  602,  591,  543,   91,   93,   94,
       81,  130,  536,  117,   95,   86,  128,   89,   82,   87,
       92,   64,   99,  101,   64,  100,  535,  102,   90,   92,
      105,  116,  129,  103,   91,  164,   93,   94,  106,  104,
      117,  107,   95,  505,  128,  165,  108,   92,  109,  110,
      502,  101,  111,  132,  125,  102,  493,  472,  105,  129,

      103,  112,  164,  467,   64,  106,  104,   64,  107,  126,
      127,   64,  165,  108,   64,  109,  434,  110,   64,  111,
      132,   64,  125,  135,  133,  136,   64,   64,  112,   64,
       64,  137,   64,  131,   64,   64,  126,  127,  138,   64,
       64,  139,   64,   64,   64,   64,  134,   64,   64,  140,
       64,   64,  133,   64,   64,   64,  348,  166,   64,  141,
      131,   64,  143,  147,   64,  412,  138,  144,  142,  139,
      146,  145,   64,  134,   64,   64,  140,   64,   64,   64,
       64,   64,   64,   64,  150,  166,  141,  409,  149,   64,
      143,  147,   64,  154,  144,  142,  151,  146,  145,   64,

      153,  152,   64,  155,   64,  159,  172,   64,  167,  157,
      173,  150,  168,  156,   64,  149,   64,   64,  169,   64,
      170,  154,   64,  151,  175,   64,  158,  153,  152,  171,
      161,  155,  159,   64,  172,  167,   64,  157,  173,  168,
      156,  174,  177,  160,  176,  169,  178,  170,  179,  180,
      389,  162,  175,  158,  183,  163,  171,  184,  161,  185,
      186,  181,   64,  187,  188,   64,  189,  192,  174,  177,
      160,  193,  176,  178,  182,  179,  190,  180,  162,  194,
      195,  183,  163,  197,  184,  198,  191,  185,  186,  181,
      187,  199,  188,  189,  200,  192,  348,  196,  193,   64,

       64,  182,   64,   64,  190,  208,  194,  205,  195,  202,
      197,  244,  198,  191,  201,  135,   64,  135,  199,   64,
       96,   61,  200,  204,  196,  135,  205,  135,   64,   96,
      234,   64,  208,  204,  203,   64,  205,  202,   64,  219,
       64,   64,  201,   64,   64,   64,   64,  206,   64,   64,
      211,  212,   63,  210,   64,  209,   64,   64,  234,   64,
       62,  207,  203,  213,  215,   64,  219,   64,   64,  216,
       64,   64,   61,  214,   64,  206,   41,   64,  211,  212,
       64,  210,  209,  235,   64,  774,  217,   64,  207,  220,
       64,  213,  215,   64,  218,  221,   64,  216,  222,   64,

      214,  223,  774,   64,   64,   64,   64,   64,   64,   64,
      235,  225,   64,  217,  774,  226,   64,  220,  774,   64,
      239,  218,   64,  221,   64,   64,  222,   64,  231,  223,
      224,  236,  230,   64,  229,  240,   64,  227,  228,  225,
      241,  242,   64,  226,  243,   64,  237,  238,  239,  245,
      232,  774,  246,  247,  248,  231,  233,  224,  249,  236,
      230,  229,  250,  240,  227,  251,  228,  252,  241,  242,
      253,  254,  243,  237,  238,  255,  256,  245,  232,  246,
      247,  257,  248,  258,  233,  259,  249,  260,  261,  262,
      250,  263,  251,  264,  252,  265,  266,  267,  253,  254,

      268,  269,  255,  256,  270,  271,  272,  774,  274,  257,
      273,  258,  774,  259,  292,  260,  261,  262,  279,  263,
      280,  264,  265,  266,  281,  267,  306,  268,  774,  269,
      312,  270,  774,  271,  272,  274,   64,   64,  273,   64,
       64,   64,  292,  774,   64,  279,   64,  280,  314,   64,
       64,  281,   64,   64,  306,   64,   64,  277,  312,   64,
      282,   64,   64,  275,   64,   64,   64,   64,  322,   64,
       64,  276,  774,  283,  284,  286,  314,   64,  774,   64,
       64,  285,   64,   64,  304,  277,   64,  288,  282,  774,
      275,  287,   64,  291,   64,   64,  322,   64,  276,  293,

      283,  290,  284,  286,  296,  294,  295,  774,  285,   64,
       64,  304,   64,   64,  288,  298,   64,   64,  287,   64,
       64,  291,   64,  297,   64,   64,  293,   64,  290,  305,
      299,  308,  294,   64,  295,   64,   64,  307,   64,  310,
      309,  311,  298,  301,  313,  302,  300,  315,  316,  317,
      318,  297,  319,  303,  774,  320,  305,  321,  299,  308,
      323,  324,  325,  329,  307,  326,  310,  309,  311,  327,
      301,  313,  302,  300,  315,  316,  317,  318,  328,  319,
      332,  303,  320,  333,  321,  330,  331,  323,  324,  334,
      325,  329,  326,  335,  774,  336,  327,  337,  338,  774,

      339,  340,  341,  342,  345,  328,  343,  332,  344,  349,
      350,  333,  330,  331,  351,   64,   64,  334,   64,   64,
       64,  335,  336,   64,  774,  337,  338,  339,  340,  341,
      774,  342,  345,  343,  362,  344,   64,  349,  350,   64,
      366,  351,   64,  347,  346,   64,  352,   64,   64,   64,
       64,   64,   64,  774,   64,   64,  353,   64,   64,  359,
       64,  362,  360,   64,   64,  355,  369,   64,  366,   64,
      347,  346,  354,  374,  352,  356,  358,   64,   64,  376,
       64,   64,  357,   64,  353,  379,   64,  359,  361,   64,
      360,  365,   64,  355,   64,  363,  375,   64,  377,  354,

      374,  364,  356,  358,  380,   64,  376,  370,   64,  357,
       64,  372,  379,   64,   64,  378,  361,   64,  365,  368,
       64,  367,  381,  363,  375,  382,  377,  383,  384,  364,
      385,  380,  386,  387,  388,  370,  390,  391,  392,  774,
      373,  393,  378,  399,  371,  394,  395,  368,  367,  396,
      381,  397,  382,  398,  383,  400,  384,  385,  401,  386,
      402,  387,  388,  390,  403,  391,  392,  373,  404,  393,
      399,  371,  405,  394,  395,  406,  413,  396,  407,  397,
      408,  398,  400,  410,  411,  414,  401,  402,  415,  416,
       64,   64,  403,   64,  417,  404,  420,   64,   64,  405,

       64,   64,  421,  406,  413,  407,   64,  408,  423,   64,
      410,  411,  414,  426,   64,   64,  416,   64,   64,   64,
       64,  417,   64,   64,  420,  418,  429,   64,   64,  421,
       64,   64,  433,   64,   64,  423,   64,   64,  419,   64,
      426,  436,   64,  430,   64,   64,  432,   64,   64,   64,
      435,  437,  418,  427,  429,  422,  438,   64,  439,  433,
       64,  440,  446,  424,  441,  419,  428,  431,  425,  436,
      430,  442,   64,  443,  445,   64,  447,  435,  437,  449,
      444,  427,  422,  448,  438,  439,  450,  451,  440,  446,
      424,  452,  441,  428,  431,  425,  453,  454,  455,  442,

      443,  456,  445,  447,  458,  460,  449,  444,  459,  461,
      462,  448,  463,  450,  451,  464,  465,  774,  466,  452,
      468,  774,  469,  453,  454,  470,  455,  471,   64,  457,
      475,   64,  458,  460,  476,  459,  478,  461,  462,  463,
      481,  774,  473,  464,  465,  466,  774,  486,  468,  469,
       64,  483,  470,   64,  471,   64,  457,  475,   64,  484,
       64,  476,   64,   64,  478,   64,  487,  481,   64,  477,
      473,   64,  489,  474,  479,  486,  480,  488,  483,   64,
      490,  491,   64,  492,  494,  495,  484,  496,  497,  774,
      498,  482,  499,  485,  487,  500,  504,  477,  501,  489,

      474,  503,  479,  506,  480,  488,  507,  490,  508,  491,
      492,  494,  495,  509,  512,  496,  497,  498,  482,  499,
      510,  485,  511,  500,  504,  501,  513,  514,  503,  515,
      517,  506,  516,  507,  518,   64,  508,  519,   64,  520,
       64,  509,  512,   64,  521,   64,  522,  510,   64,  511,
      774,  524,   64,  513,  514,   64,  526,  515,  517,  516,
       64,  527,  518,   64,  519,   64,  525,  520,   64,   64,
      528,  529,  521,  522,  530,  531,  532,  523,  524,  533,
      534,  774,  537,  538,  526,  539,  774,  540,  527,  541,
       64,  542,  544,   64,  545,  546,  547,  528,  529,  548,

      549,  530,  531,  532,  550,  523,  533,  551,  534,  537,
      552,  538,  553,  539,  540,  554,  560,  541,  542,  555,
      544,  545,  546,  547,  556,  557,  558,  548,  549,  559,
      562,   64,  550,  565,   64,  551,  563,  564,  552,  566,
      553,  567,  568,  554,  560,  561,  555,  569,  570,  571,
      572,  556,  557,  558,  573,  574,  559,  562,  575,  576,
      565,  577,  578,  583,  563,  564,  579,  566,  567,  580,
      568,  581,  582,  561,  569,  570,  571,  572,  584,  585,
      586,  588,  573,  574,  587,  575,  589,  576,  590,  577,
      578,  583,  592,  579,  593,  594,  580,  595,  581,  582,

      596,  597,  598,  774,  599,  584,  600,  585,  586,  588,
      601,  587,  603,  589,  604,  590,  605,  606,  607,  609,
      592,  608,  593,  594,  610,  595,  611,  612,  596,  597,
      598,  599,  613,  600,  614,  615,  617,  601,  618,  619,
      603,  620,  604,  605,  621,  606,  607,  609,  608,  622,
      623,  625,  610,  611,  612,  624,  626,  627,  629,  630,
      613,  614,  615,  617,  632,  618,  633,  619,  634,  620,
      636,  621,  637,  638,  639,  774,  640,  622,  623,  625,
      641,  642,  624,  626,  627,  643,  629,  630,  644,  645,
      646,  649,  632,  633,  647,  648,  634,  636,  650,  651,

      637,  638,  639,  640,  652,  653,  654,  641,  642,  655,
      656,  657,  643,  658,  659,  644,  645,  660,  646,  649,
      661,  647,  648,  662,  663,  650,  664,  651,  665,  666,
      774,  667,  652,  653,  654,  668,  655,  656,  669,  657,
      658,  659,  670,  671,  672,  660,  673,  677,  661,  674,
      662,  663,  675,  664,  676,  678,  665,  666,  667,  679,
      680,  681,  682,  668,  683,  669,  684,  686,  687,  670,
      688,  671,  672,  689,  673,  677,  674,  690,  691,  675,
      692,  676,  678,  693,  694,  695,  679,  680,  681,  682,
      696,  697,  683,  698,  684,  686,  687,  699,  688,  700,

      701,  689,  702,  703,  705,  690,  691,  704,  692,  706,
      693,  694,  707,  695,  708,  709,  710,  696,  697,  711,
      712,  698,  713,  715,  699,  714,  700,  701,  716,  717,
      702,  703,  705,  718,  704,  719,  706,  720,  721,  707,
      722,  708,  723,  709,  710,  724,  711,  725,  712,  726,
      713,  715,  714,  727,  728,  716,  729,  717,  730,  731,
      718,  732,  733,  719,  720,  734,  721,  722,  735,  723,
      736,  738,  724,  737,  739,  725,  726,  740,  741,  742,
      727,  728,  743,  729,  744,  730,  731,  745,  732,  746,
      733,  747,  734,  748,  749,  750,  735,  751,  736,  738,

      737,  752,  739,  753,  754,  740,  741,  742,  755,  743,
      756,  744,  757,  758,  759,  745,  760,  746,  761,  747,
      748,  749,  762,  750,  763,  751,  764,  765,  752,  766,
      753,  754,  767,  768,  769,  755,  770,  771,  756,  757,
      758,  772,  759,  773,  760,  761,  774,  774,  774,  762,
      774,  763,  774,  764,  765,  774,  766,  774,  774,  767,
      768,  769,  774,  770,  771,  774,  774,  774,  772,  774,
      773,   60,   60,    3,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,

      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774
    } ;

static yyconst flex_int16_t yy_chk[1947] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    2,    5,    7,    5,   15,   23,   15,   25,
       23,   39,   25,   39,   41,   65,   41,   80,   65,   86,
       80,  133,   86,  205,  133,  205,   48,   25,   50,    2,

       26,    7,   16,   26,   16,   16,   16,   16,   16,   53,
       16,  777,   25,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   48,   26,   25,   50,   49,  152,  776,
       16,  152,   16,   16,   16,   16,   16,   53,   16,   25,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       22,   26,   24,   22,   49,   24,   27,   30,   54,   27,
       30,   28,   43,   43,   28,   22,   24,   30,  667,   32,
      608,   22,   32,   22,  216,   54,   24,  216,   22,   22,
       27,   30,   24,   28,   28,  222,   54,   30,  222,   28,
       43,   43,   55,   22,   24,   30,   32,   52,   22,   56,

       22,   31,   54,   24,   31,   22,   22,   27,   30,   24,
       28,   28,   29,   52,   30,   29,   28,   33,   34,   55,
       33,   34,   29,   32,   59,   52,  604,   56,   31,   33,
       29,   35,   31,  600,   35,   44,   38,  586,   44,   38,
       52,   33,   34,   51,  570,  555,  504,   33,   35,   35,
       29,   59,  496,   51,   38,   31,   58,   33,   29,   31,
       38,   67,   44,   45,   67,   44,  495,   45,   33,   34,
       46,   51,   58,   45,   33,   97,   35,   35,   46,   45,
       51,   46,   38,  455,   58,   98,   46,   38,   46,   47,
      451,   45,   47,   67,   57,   45,  441,  417,   46,   58,

       45,   47,   97,  411,   66,   46,   45,   66,   46,   57,
       57,   68,   98,   46,   68,   46,  374,   47,   69,   47,
       67,   69,   57,   70,   68,   70,   71,   72,   47,   71,
       72,   70,   73,   66,   70,   73,   57,   57,   71,   74,
       76,   71,   74,   76,   75,   78,   69,   75,   78,   72,
       77,   79,   68,   77,   79,   81,  348,   99,   81,   73,
       66,   82,   75,   79,   82,  342,   71,   76,   74,   71,
       78,   77,   84,   69,   83,   84,   72,   83,   85,   87,
       91,   85,   87,   91,   82,   99,   73,  339,   81,   88,
       75,   79,   88,   87,   76,   74,   83,   78,   77,   89,

       85,   84,   89,   88,   90,   91,  105,   90,  100,   89,
      106,   82,  101,   88,   92,   81,   93,   92,  102,   93,
      103,   87,   94,   83,  108,   94,   90,   85,   84,  104,
       93,   88,   91,   95,  105,  100,   95,   89,  106,  101,
       88,  107,  110,   92,  109,  102,  111,  103,  112,  113,
      319,   94,  108,   90,  115,   95,  104,  116,   93,  117,
      118,  114,  231,  119,  120,  231,  121,  123,  107,  110,
       92,  124,  109,  111,  114,  112,  122,  113,   94,  125,
      126,  115,   95,  127,  116,  128,  122,  117,  118,  114,
      119,  129,  120,  121,  130,  123,  278,  126,  124,  132,

      131,  114,  132,  131,  122,  137,  125,  204,  126,  132,
      127,  173,  128,  122,  131,  135,  134,  135,  129,  134,
       96,   60,  130,  135,  126,  136,  135,  136,  138,   42,
      164,  138,  137,  136,  134,  139,  136,  132,  139,  148,
      140,  141,  131,  140,  141,  143,  142,  136,  143,  142,
      140,  141,   20,  139,  144,  138,  145,  144,  164,  145,
       18,  136,  134,  142,  144,  146,  148,  147,  146,  145,
      147,  149,   17,  143,  149,  136,   12,  150,  140,  141,
      150,  139,  138,  166,  151,    3,  146,  151,  136,  149,
      153,  142,  144,  153,  147,  150,  155,  145,  151,  155,

      143,  153,    0,  154,  156,  161,  154,  156,  161,  159,
      166,  155,  159,  146,    0,  156,  157,  149,    0,  157,
      168,  147,  160,  150,  158,  160,  151,  158,  161,  153,
      154,  167,  160,  162,  159,  169,  162,  157,  158,  155,
      170,  171,  163,  156,  172,  163,  167,  167,  168,  174,
      162,    0,  175,  176,  177,  161,  163,  154,  178,  167,
      160,  159,  179,  169,  157,  180,  158,  181,  170,  171,
      182,  183,  172,  167,  167,  184,  185,  174,  162,  175,
      176,  186,  177,  187,  163,  188,  178,  189,  190,  190,
      179,  190,  180,  191,  181,  192,  193,  194,  182,  183,

      195,  196,  184,  185,  197,  198,  199,    0,  200,  186,
      199,  187,    0,  188,  219,  189,  190,  190,  206,  190,
      207,  191,  192,  193,  208,  194,  236,  195,    0,  196,
      241,  197,    0,  198,  199,  200,  201,  202,  199,  201,
      202,  203,  219,    0,  203,  206,  209,  207,  243,  209,
      210,  208,  212,  210,  236,  212,  211,  203,  241,  211,
      209,  213,  214,  201,  213,  214,  215,  217,  252,  215,
      217,  202,    0,  210,  211,  213,  243,  220,    0,  218,
      220,  212,  218,  221,  234,  203,  221,  215,  209,    0,
      201,  214,  223,  218,  226,  223,  252,  226,  202,  220,

      210,  217,  211,  213,  224,  221,  223,    0,  212,  225,
      224,  234,  225,  224,  215,  226,  227,  228,  214,  227,
      228,  218,  229,  225,  230,  229,  220,  230,  217,  235,
      227,  238,  221,  233,  223,  232,  233,  237,  232,  239,
      238,  240,  226,  229,  242,  230,  228,  244,  245,  246,
      247,  225,  248,  232,    0,  249,  235,  250,  227,  238,
      253,  254,  255,  259,  237,  256,  239,  238,  240,  257,
      229,  242,  230,  228,  244,  245,  246,  247,  258,  248,
      261,  232,  249,  262,  250,  260,  260,  253,  254,  263,
      255,  259,  256,  264,    0,  265,  257,  266,  267,    0,

      268,  269,  270,  271,  274,  258,  272,  261,  273,  279,
      280,  262,  260,  260,  281,  275,  276,  263,  275,  276,
      277,  264,  265,  277,    0,  266,  267,  268,  269,  270,
        0,  271,  274,  272,  292,  273,  282,  279,  280,  282,
      296,  281,  283,  277,  276,  283,  282,  285,  286,  284,
      285,  286,  284,    0,  287,  288,  283,  287,  288,  289,
      290,  292,  289,  290,  295,  285,  299,  295,  296,  299,
      277,  276,  284,  304,  282,  286,  288,  293,  291,  306,
      293,  291,  287,  294,  283,  308,  294,  289,  291,  300,
      289,  295,  300,  285,  297,  293,  305,  297,  307,  284,

      304,  294,  286,  288,  309,  298,  306,  300,  298,  287,
      301,  302,  308,  301,  302,  307,  291,  303,  295,  298,
      303,  297,  310,  293,  305,  311,  307,  312,  313,  294,
      314,  309,  315,  316,  318,  300,  320,  321,  322,    0,
      303,  323,  307,  329,  301,  324,  325,  298,  297,  326,
      310,  327,  311,  328,  312,  330,  313,  314,  331,  315,
      332,  316,  318,  320,  333,  321,  322,  303,  334,  323,
      329,  301,  335,  324,  325,  336,  344,  326,  337,  327,
      338,  328,  330,  340,  341,  345,  331,  332,  346,  350,
      347,  346,  333,  347,  351,  334,  359,  352,  353,  335,

      352,  353,  360,  336,  344,  337,  354,  338,  362,  354,
      340,  341,  345,  366,  355,  356,  350,  355,  356,  357,
      358,  351,  357,  358,  359,  352,  369,  361,  363,  360,
      361,  363,  372,  364,  365,  362,  364,  365,  355,  367,
      366,  376,  367,  369,  368,  370,  371,  368,  370,  371,
      375,  377,  352,  367,  369,  361,  378,  373,  379,  372,
      373,  380,  387,  363,  381,  355,  368,  370,  364,  376,
      369,  382,  428,  384,  386,  428,  388,  375,  377,  390,
      384,  367,  361,  389,  378,  379,  391,  392,  380,  387,
      363,  393,  381,  368,  370,  364,  396,  397,  398,  382,

      384,  399,  386,  388,  400,  402,  390,  384,  401,  403,
      404,  389,  405,  391,  392,  406,  407,    0,  409,  393,
      412,    0,  414,  396,  397,  415,  398,  416,  418,  399,
      420,  418,  400,  402,  421,  401,  423,  403,  404,  405,
      426,    0,  418,  406,  407,  409,    0,  432,  412,  414,
      419,  429,  415,  419,  416,  422,  399,  420,  422,  430,
      424,  421,  425,  424,  423,  425,  433,  426,  427,  422,
      418,  427,  436,  419,  424,  432,  425,  434,  429,  431,
      437,  438,  431,  439,  442,  443,  430,  444,  445,    0,
      446,  427,  447,  431,  433,  448,  454,  422,  450,  436,

      419,  452,  424,  456,  425,  434,  458,  437,  459,  438,
      439,  442,  443,  460,  464,  444,  445,  446,  427,  447,
      461,  431,  462,  448,  454,  450,  465,  466,  452,  467,
      469,  456,  468,  458,  470,  473,  459,  472,  473,  475,
      474,  460,  464,  474,  476,  477,  478,  461,  477,  462,
        0,  483,  479,  465,  466,  479,  486,  467,  469,  468,
      480,  487,  470,  480,  472,  482,  485,  475,  482,  485,
      488,  489,  476,  478,  490,  491,  492,  482,  483,  493,
      494,    0,  497,  499,  486,  500,    0,  501,  487,  502,
      561,  503,  505,  561,  506,  508,  509,  488,  489,  510,

      511,  490,  491,  492,  512,  482,  493,  513,  494,  497,
      514,  499,  515,  500,  501,  516,  522,  502,  503,  517,
      505,  506,  508,  509,  518,  519,  520,  510,  511,  521,
      524,  523,  512,  526,  523,  513,  525,  525,  514,  527,
      515,  528,  529,  516,  522,  523,  517,  531,  532,  533,
      534,  518,  519,  520,  535,  536,  521,  524,  537,  538,
      526,  539,  541,  547,  525,  525,  543,  527,  528,  544,
      529,  545,  546,  523,  531,  532,  533,  534,  548,  549,
      550,  552,  535,  536,  551,  537,  553,  538,  554,  539,
      541,  547,  556,  543,  557,  559,  544,  560,  545,  546,

      563,  564,  565,    0,  567,  548,  568,  549,  550,  552,
      569,  551,  571,  553,  572,  554,  573,  574,  575,  577,
      556,  576,  557,  559,  578,  560,  579,  580,  563,  564,
      565,  567,  581,  568,  583,  585,  587,  569,  588,  589,
      571,  590,  572,  573,  591,  574,  575,  577,  576,  592,
      593,  597,  578,  579,  580,  596,  598,  599,  602,  603,
      581,  583,  585,  587,  605,  588,  606,  589,  607,  590,
      609,  591,  610,  611,  612,    0,  613,  592,  593,  597,
      614,  616,  596,  598,  599,  617,  602,  603,  618,  619,
      620,  624,  605,  606,  621,  622,  607,  609,  625,  626,

      610,  611,  612,  613,  628,  629,  630,  614,  616,  631,
      632,  633,  617,  634,  635,  618,  619,  637,  620,  624,
      638,  621,  622,  639,  640,  625,  642,  626,  644,  645,
        0,  646,  628,  629,  630,  647,  631,  632,  649,  633,
      634,  635,  650,  652,  653,  637,  654,  658,  638,  655,
      639,  640,  656,  642,  657,  659,  644,  645,  646,  660,
      661,  662,  663,  647,  664,  649,  665,  668,  670,  650,
      671,  652,  653,  672,  654,  658,  655,  673,  674,  656,
      675,  657,  659,  676,  677,  678,  660,  661,  662,  663,
      680,  681,  664,  683,  665,  668,  670,  684,  671,  685,

      686,  672,  688,  689,  691,  673,  674,  690,  675,  692,
      676,  677,  693,  678,  694,  695,  696,  680,  681,  698,
      699,  683,  700,  702,  684,  701,  685,  686,  703,  704,
      688,  689,  691,  705,  690,  706,  692,  709,  710,  693,
      711,  694,  712,  695,  696,  713,  698,  714,  699,  715,
      700,  702,  701,  716,  717,  703,  718,  704,  719,  720,
      705,  721,  722,  706,  709,  723,  710,  711,  724,  712,
      725,  729,  713,  726,  730,  714,  715,  731,  732,  733,
      716,  717,  735,  718,  736,  719,  720,  738,  721,  739,
      722,  740,  723,  741,  742,  743,  724,  744,  725,  729,

      726,  745,  730,  746,  747,  731,  732,  733,  748,  735,
      749,  736,  750,  751,  752,  738,  754,  739,  755,  740,
      741,  742,  756,  743,  757,  744,  758,  759,  745,  760,
      746,  747,  762,  764,  765,  748,  766,  767,  749,  750,
      751,  769,  752,  770,  754,  755,    0,    0,    0,  756,
        0,  757,    0,  758,  759,    0,  760,    0,    0,  762,
      764,  765,    0,  766,  767,    0,    0,    0,  769,    0,
      770,  775,  775,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,

      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "pddl+.l"
#line 2 "pddl+.l"

#include <string>

#include <fstream>
  using std::cin;
  using std::cout;
  using std::cerr;
  using std::istream;
  using namespace VAL;
extern "C" int yywrap();

#line 1111 "pddl+.lex.yy.h"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 26 "pddl+.l"

#line 1221 "pddl+.lex.yy.h"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 775 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1874 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 27 "pddl+.l"
{return OPEN_BRAC;}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 28 "pddl+.l"
{return CLOSE_BRAC;}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 29 "pddl+.l"
{return OPEN_SQ;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 30 "pddl+.l"
{return CLOSE_SQ;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 31 "pddl+.l"
{return REQS;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 32 "pddl+.l"
{return EQUALITY;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 33 "pddl+.l"
{return STRIPS;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 34 "pddl+.l"
{return ADL;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 35 "pddl+.l"
{return TYPING;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 36 "pddl+.l"
{return DISJUNCTIVE_PRECONDS;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 37 "pddl+.l"
{return EXT_PRECS;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 38 "pddl+.l"
{return UNIV_PRECS;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 39 "pddl+.l"
{return QUANT_PRECS;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 40 "pddl+.l"
{return COND_EFFS;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 41 "pddl+.l"
{return FLUENTS;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 42 "pddl+.l"
{return NUMERICFLUENTS;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 43 "pddl+.l"
{return OBJECTFLUENTS;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 44 "pddl+.l"
{return ACTIONCOSTS;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 45 "pddl+.l"
{return TIME;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 46 "pddl+.l"
{return PREFERENCES;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 47 "pddl+.l"
{return CONSTRAINTS;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 48 "pddl+.l"
{return CONSTANTS;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 49 "pddl+.l"
{return PREDS;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 50 "pddl+.l"
{return FUNCTIONS;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 51 "pddl+.l"
{return CLASSES;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 52 "pddl+.l"
{return CLASS;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 53 "pddl+.l"
{return TYPES;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 54 "pddl+.l"
{return DURATIVE_ACTIONS;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 55 "pddl+.l"
{return DURATION_INEQUALITIES;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 56 "pddl+.l"
{return CONTINUOUS_EFFECTS;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 57 "pddl+.l"
{return NEGATIVE_PRECONDITIONS;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 58 "pddl+.l"
{return DERIVED_PREDICATES;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 59 "pddl+.l"
{return TIMED_INITIAL_LITERALS;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 60 "pddl+.l"
{return SUPPLYDEMAND_REQ;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 61 "pddl+.l"
{return DEFINE;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 62 "pddl+.l"
{return PDDLDOMAIN;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 63 "pddl+.l"
{return ACTION;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 64 "pddl+.l"
{return PROCESS;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 65 "pddl+.l"
{return EVENT;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 66 "pddl+.l"
{return DURATIVE_ACTION;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 67 "pddl+.l"
{return DERIVED;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 68 "pddl+.l"
{return ARGS;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 69 "pddl+.l"
{return PRE;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 70 "pddl+.l"
{return CONDITION;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 71 "pddl+.l"
{return START_PRE;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 72 "pddl+.l"
{return END_PRE;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 73 "pddl+.l"
{return AT_START;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 74 "pddl+.l"
{return AT_END;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 75 "pddl+.l"
{return OVER_ALL;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 76 "pddl+.l"
{return EFFECTS;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 77 "pddl+.l"
{return INITIAL_EFFECT;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 78 "pddl+.l"
{return FINAL_EFFECT;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 79 "pddl+.l"
{return INVARIANT;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 80 "pddl+.l"
{return DURATION;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 81 "pddl+.l"
{return CONTROL;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 82 "pddl+.l"
{return AND;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 83 "pddl+.l"
{return OR;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 84 "pddl+.l"
{return EXISTS;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 85 "pddl+.l"
{return FORALL;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 86 "pddl+.l"
{return IMPLY;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 87 "pddl+.l"
{return NOT;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 88 "pddl+.l"
{return WHEN;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 89 "pddl+.l"
{return EITHER;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 90 "pddl+.l"
{return PROBLEM;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 91 "pddl+.l"
{return FORDOMAIN;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 92 "pddl+.l"
{return OBJECTS;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 93 "pddl+.l"
{return INITIALLY;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 94 "pddl+.l"
{return GOALS;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 95 "pddl+.l"
{return EQ;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 96 "pddl+.l"
{return LENGTH;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 97 "pddl+.l"
{return SERIAL;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 98 "pddl+.l"
{return PARALLEL;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 99 "pddl+.l"
{return METRIC;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 100 "pddl+.l"
{return MINIMIZE;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 101 "pddl+.l"
{return MAXIMIZE;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 102 "pddl+.l"
{return ISVIOLATED;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 103 "pddl+.l"
{return HASHT;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 104 "pddl+.l"
{return DURATION_VAR;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 105 "pddl+.l"
{return TOTAL_TIME;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 106 "pddl+.l"
{return TIME;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 107 "pddl+.l"
{return NUMBER;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 108 "pddl+.l"
{return INCREASE;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 109 "pddl+.l"
{return DECREASE;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 110 "pddl+.l"
{return SCALE_UP;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 111 "pddl+.l"
{return SCALE_DOWN;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 112 "pddl+.l"
{return ASSIGN;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 113 "pddl+.l"
{return PREFERENCE;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 114 "pddl+.l"
{return ALWAYS;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 115 "pddl+.l"
{return SOMETIME;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 116 "pddl+.l"
{return WITHIN;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 117 "pddl+.l"
{return ATMOSTONCE;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 118 "pddl+.l"
{return SOMETIMEAFTER;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 119 "pddl+.l"
{return SOMETIMEBEFORE;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 120 "pddl+.l"
{return ALWAYSWITHIN;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 121 "pddl+.l"
{return HOLDDURING;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 122 "pddl+.l"
{return HOLDAFTER;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 123 "pddl+.l"
{return AFTER;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 124 "pddl+.l"
{return SUPPLYDEMAND;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 125 "pddl+.l"
{return NAMETAG;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 126 "pddl+.l"
{return PLUS;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 127 "pddl+.l"
{return HYPHEN;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 128 "pddl+.l"
{return MUL;}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 129 "pddl+.l"
{return DIV;}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 130 "pddl+.l"
{return GREATER;}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 131 "pddl+.l"
{return GREATEQ;}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 132 "pddl+.l"
{return LESS;}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 133 "pddl+.l"
{return LESSEQ;}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 134 "pddl+.l"
{return Q;}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 135 "pddl+.l"
{return COLON;}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 136 "pddl+.l"
{return DOT;}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 137 "pddl+.l"
{return MODULES;}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 139 "pddl+.l"
{unsigned int i;
           for(i = 3;i < strlen(yytext);++i)
           {
           	  if(yytext[i] != '\t' && yytext[i] != ' ') break;
           };
           yylval.fval = atof(yytext+i);
			return (AT_TIME);
          }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 149 "pddl+.l"
{unsigned int i;
          yylval.cp = new char[strlen(yytext)+1];
          strcpy(yylval.cp,yytext);
	  for(i = 0;i<strlen(yylval.cp);i++)
	      yylval.cp[i] = tolower(yylval.cp[i]);
	  // If symbol is registered as a function symbol,
	  // return token FUNCTION_SYMBOL else return NAME
	  //cout << yytext << " " << line_no << "\n";
	  if (current_analysis->func_tab.symbol_probe(yylval.cp) != NULL)
	      return FUNCTION_SYMBOL;
	  else
	      return NAME;}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 162 "pddl+.l"
;
	YY_BREAK
case 115:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 163 "pddl+.l"
;
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 164 "pddl+.l"
{line_no++;};
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 166 "pddl+.l"
{yylval.ival = atoi(yytext);return (INTVAL);}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 167 "pddl+.l"
{yylval.fval = atof(yytext);return (FLOATVAL);}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 169 "pddl+.l"
ECHO;
	YY_BREAK
#line 1922 "pddl+.lex.yy.h"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 775 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 775 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 774);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

extern "C" int isatty (int );

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 169 "pddl+.l"




extern "C++" {
  int yyFlexLexer::yywrap()
{
	return 1;
};
};


